# YOLO Training Configuration for Vertebrae Fracture Detection

# Model configuration
model:
  name: "yolov8n"        # YOLOv8 model size (n, s, m, l, x)
  pretrained: true       # Use COCO pretrained weights
  num_classes: 2         # Number of classes
  
# Training parameters
training:
  epochs: 100            # Number of training epochs
  batch_size: 16         # Batch size
  learning_rate: 0.01    # Initial learning rate
  weight_decay: 0.0005   # Weight decay
  momentum: 0.937        # SGD momentum
  
# Learning rate scheduling
scheduler:
  type: "cosine"         # Learning rate scheduler type
  warmup_epochs: 3       # Warmup epochs
  warmup_momentum: 0.8   # Warmup momentum
  warmup_bias_lr: 0.1    # Warmup bias learning rate
  
# Optimization
optimizer:
  type: "SGD"            # Optimizer type
  nesterov: true         # Use Nesterov momentum
  
# Loss function weights
loss_weights:
  box: 7.5               # Box loss weight
  cls: 0.5               # Classification loss weight
  dfl: 1.5               # Distribution focal loss weight
  
# Data loading
data_loader:
  workers: 8             # Number of data loader workers
  pin_memory: true       # Pin memory for faster GPU transfer
  
# Validation
validation:
  interval: 1            # Validation interval (epochs)
  patience: 50           # Early stopping patience
  
# Checkpoints
checkpoints:
  save_period: 10        # Save checkpoint every N epochs
  save_best: true        # Save best model
  save_last: true        # Save last model
  
# Mixed precision training
mixed_precision: true    # Use mixed precision training

# Device configuration
device:
  type: "cuda"           # Device type (cuda/cpu)
  
# Weights & Biases logging
wandb:
  project: "vertebrae-yolo"
  entity: null           # Your W&B entity
  tags: ["yolo", "medical", "vertebrae", "fracture"]
  
# Medical-specific training settings
medical:
  class_weights: [1.0, 2.0]  # Class weights for imbalanced data
  focal_loss_gamma: 1.5      # Focal loss gamma for hard examples
  
# Augmentation settings (additional to dataset config)
augmentation:
  mosaic: 1.0            # Mosaic augmentation probability
  mixup: 0.0             # Mixup augmentation probability
  copy_paste: 0.0        # Copy-paste augmentation probability
  
# Model specific settings
model_settings:
  depth_multiple: 1.0    # Model depth multiplier
  width_multiple: 1.0    # Model width multiplier
  max_channels: 1024     # Maximum number of channels
  
# Evaluation settings
evaluation:
  iou_threshold: 0.5     # IoU threshold for evaluation
  conf_threshold: 0.25   # Confidence threshold
  nms_threshold: 0.45    # NMS threshold
  
# Export settings
export:
  format: ["pytorch", "onnx"]  # Export formats
  optimize: true         # Optimize exported model
  half: false           # Use half precision for export